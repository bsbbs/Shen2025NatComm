{
bars <- fastbads$scl[fastbads$modeli == mdli]
hist(bars, 40, probability = TRUE, xlab = "Scale", main = names[mdli], bty = "n")
lines(density(bars))
legend('topleft',as.expression(bquote(mean~scale == .(sprintf('%1.3f', mean(bars))))), bty = 'n')
}
par(mfrow=c(2,2))
for (mdli in c(2,4,5))
{
bars <- fastbads$scl[fastbads$modeli == mdli]
hist(bars, 40, probability = TRUE, xlab = "Scale", main = names[mdli], bty = "n")
lines(density(bars))
legend('topleft',as.expression(bquote(mean~scale == .(sprintf('%1.3f', mean(bars))))), bty = 'n')
}
dev.copy(pdf,file.path(out_dir,sprintf("scl.pdf")),height=5, width=5)
dev.off()
Analysis <- '/Users/bs3667/Noise/UnusedCodeorForFutureAnalyses/modelfit/Results/ModelFit_Nested/'
out_dir <- file.path(Analysis,'plot')
if (!dir.exists(out_dir)){dir.create(out_dir)}
fastbads <- read.table(file.path(Analysis,'BestRslts.txt'), header = TRUE, sep = '\t')
# fastbads <- fastbads[fastbads$subID < 47,]
fastbads$subID <- as.factor(fastbads$subID)
fastbads$name <- factor(fastbads$name, levels = c('McFadden','LinearDistrb','DN','dDNb','dDNd'))
names <- levels(fastbads$name)
fastbads$modeli <- as.factor(fastbads$modeli)
str(fastbads)
length(unique(fastbads$subID))
unique(fastbads$subID)
par(mfrow=c(2,2))
for (mdli in 1)
{
for (mdlj in 2:5)
{
bars <- fastbads$nll[fastbads$modeli == mdlj] - fastbads$nll[fastbads$modeli == mdli]
hist(bars, xlab = 'nLL', main = sprintf('%s - %s', names[mdlj], names[mdli]), 40)
legend("topleft",
legend = as.expression(bquote(italic(Delta~nLL) == .(sprintf("%1.2f", sum(bars))))),
bty = "n")
}
}
dev.copy(pdf,file.path(out_dir,sprintf("Models_vs_McFadden.pdf")),height=5, width=5)
dev.off()
par(mfrow=c(2,2))
for (mdli in 2)
{
for (mdlj in 3:5)
{
bars <- fastbads$nll[fastbads$modeli == mdlj] - fastbads$nll[fastbads$modeli == mdli]
hist(bars, xlab = 'nLL', main = sprintf('%s - %s', names[mdlj], names[mdli]), 40)
legend("topleft",
legend = as.expression(bquote(italic(Delta~nLL) == .(sprintf("%1.2f", sum(bars))))),
bty = "n")
}
}
dev.copy(pdf,file.path(out_dir,sprintf("Models_vs_Mdl2.pdf")),height=5, width=5)
dev.off()
par(mfrow=c(1,2))
for (mdli in 3)
{
for (mdlj in 4:5)
{
bars <- fastbads$nll[fastbads$modeli == mdlj] - fastbads$nll[fastbads$modeli == mdli]
hist(bars, xlab = 'nLL', main = sprintf('%s - %s', names[mdlj], names[mdli]), 40)
legend("topleft",
legend = as.expression(bquote(italic(Delta~nLL) == .(sprintf("%1.2f", sum(bars))))),
bty = "n")
}
}
dev.copy(pdf,file.path(out_dir,sprintf("Models_vs_DN.pdf")),height=2.5, width=5)
dev.off()
par(mfrow=c(2,2))
mdlA <- c(1,1,2,3)
mdlB <- c(2,3,5,5)
for (i in 1:4)
{
bars <- fastbads$nll[fastbads$modeli == mdlB[i]] - fastbads$nll[fastbads$modeli == mdlA[i]]
plot(fastbads$nll[fastbads$modeli == mdlA[i]], fastbads$nll[fastbads$modeli == mdlB[i]], pch = 20, xlab = names[mdlA[i]], ylab = names[mdlB[i]])
abline(a = 0, b = 1, lty = 2)
legend("topleft",
legend = as.expression(bquote(italic(Delta~nLL) == .(sprintf("%1.2f", sum(bars))))),
bty = "n")
}
dev.copy(pdf,file.path(out_dir,sprintf("Models_vs_Models.pdf")),height=5, width=5)
dev.off()
par(mfrow=c(2,2))
for (mdli in 3:5)
{
bars <- fastbads$wp[fastbads$modeli == mdli]
hist(bars, 40, probability = TRUE, xlab = 'wp', main = names[mdli], bty = "n")
lines(density(bars))
legend('topleft',sprintf('mean wp = %.3f', mean(bars)), bty = 'n')
}
dev.copy(pdf,file.path(out_dir,sprintf("wp.pdf")),height=5, width=5)
dev.off()
par(mfrow=c(2,3))
for (mdli in 1:5)
{
bars <- fastbads$Mp[fastbads$modeli == mdli]
hist(bars, 40, probability = TRUE, xlab = 'Mp', main = names[mdli], bty = "n")
lines(density(bars))
legend('topleft',sprintf('mean Mp = %1.1f', mean(bars)), bty = 'n')
}
dev.copy(pdf,file.path(out_dir,sprintf("Mp.pdf")),height=5, width=7.5)
dev.off()
par(mfrow=c(2,3))
for (mdli in 1:5)
{
bars <- fastbads$delta[fastbads$modeli == mdli]
hist(bars, 40, probability = TRUE, xlab = expression(delta), main = names[mdli], bty = "n")
lines(density(bars))
legend('topleft',as.expression(bquote(mean~delta == .(sprintf('%1.3f', mean(bars))))), bty = 'n')
}
dev.copy(pdf,file.path(out_dir,sprintf("delta.pdf")),height=5, width=7.5)
dev.off()
par(mfrow=c(2,2))
for (mdli in 3:5)
{
plot(Mp ~ wp, data = fastbads[fastbads$modeli == mdli,], log ='y', xlab = 'wp',ylab = 'Mp', main = names[mdli], pch = 20)
}
dev.copy(pdf,file.path(out_dir,sprintf("Mp~wp.pdf")),height=5, width=5)
dev.off()
# scaling parame
par(mfrow=c(2,2))
for (mdli in c(2,4,5))
{
bars <- fastbads$scl[fastbads$modeli == mdli]
hist(bars, 40, probability = TRUE, xlab = "Scale", main = names[mdli], bty = "n")
lines(density(bars))
legend('topleft',as.expression(bquote(mean~scale == .(sprintf('%1.3f', mean(bars))))), bty = 'n')
}
dev.copy(pdf,file.path(out_dir,sprintf("scl.pdf")),height=5, width=5)
dev.off()
fastbads$nll
par(mfrow=c(2,3))
for (mdli in 1:5)
{
bars <- fastbads$delta[fastbads$modeli == mdli]
hist(bars, 40, probability = TRUE, xlab = expression(delta), main = names[mdli], bty = "n")
lines(density(bars))
test <- t.test(bars)
legend('topleft',as.expression(bquote(mean~delta == .(sprintf('%1.3f\np = %1.3f', mean(bars), test$p.value)))), bty = 'n')
}
dev.copy(pdf,file.path(out_dir,sprintf("delta.pdf")),height=5, width=7.5)
dev.off()
Analysis <- '/Users/bs3667/Noise/UnusedCodeorForFutureAnalyses/modelfit/Results/ModelFit_Nested/'
out_dir <- file.path(Analysis,'plot')
if (!dir.exists(out_dir)){dir.create(out_dir)}
fastbads <- read.table(file.path(Analysis,'BestRslts.txt'), header = TRUE, sep = '\t')
fastbads
fastbads$scl
fastbads$subID
# fastbads <- fastbads[fastbads$subID < 47,]
blacklistorder <- c(21,33,48,51,57)
!fastbads$subID %in% blacklistorder
unique(fastbads$subID)
alist <- unique(fastbads$subID)
alist[!alist %in% blacklistorder]
Analysis <- '/Users/bs3667/Noise/UnusedCodeorForFutureAnalyses/modelfit/Results/ModelFit_Nested/'
out_dir <- file.path(Analysis,'plot')
if (!dir.exists(out_dir)){dir.create(out_dir)}
fastbads <- read.table(file.path(Analysis,'BestRslts.txt'), header = TRUE, sep = '\t')
blacklistorder <- c(21,33,48,51,57) # the same as the blacklist defined above, but with order number instead of subject ID
fastbads <- fastbads[!fastbads$subID %in% blacklistorder,]
fastbads$subID <- as.factor(fastbads$subID)
fastbads$name <- factor(fastbads$name, levels = c('McFadden','LinearDistrb','DN','dDNb','dDNd'))
names <- levels(fastbads$name)
fastbads$modeli <- as.factor(fastbads$modeli)
str(fastbads)
# Model comparison
par(mfrow=c(2,2))
for (mdli in 1)
{
for (mdlj in 2:5)
{
bars <- fastbads$nll[fastbads$modeli == mdlj] - fastbads$nll[fastbads$modeli == mdli]
hist(bars, xlab = 'nLL', main = sprintf('%s - %s', names[mdlj], names[mdli]), 40)
legend("topleft",
legend = as.expression(bquote(italic(Delta~nLL) == .(sprintf("%1.2f", sum(bars))))),
bty = "n")
}
}
dev.copy(pdf,file.path(out_dir,sprintf("Models_vs_McFadden.pdf")),height=5, width=5)
dev.off()
par(mfrow=c(2,2))
for (mdli in 2)
{
for (mdlj in 3:5)
{
bars <- fastbads$nll[fastbads$modeli == mdlj] - fastbads$nll[fastbads$modeli == mdli]
hist(bars, xlab = 'nLL', main = sprintf('%s - %s', names[mdlj], names[mdli]), 40)
legend("topleft",
legend = as.expression(bquote(italic(Delta~nLL) == .(sprintf("%1.2f", sum(bars))))),
bty = "n")
}
}
dev.copy(pdf,file.path(out_dir,sprintf("Models_vs_Mdl2.pdf")),height=5, width=5)
dev.off()
par(mfrow=c(1,2))
for (mdli in 3)
{
for (mdlj in 4:5)
{
bars <- fastbads$nll[fastbads$modeli == mdlj] - fastbads$nll[fastbads$modeli == mdli]
hist(bars, xlab = 'nLL', main = sprintf('%s - %s', names[mdlj], names[mdli]), 40)
legend("topleft",
legend = as.expression(bquote(italic(Delta~nLL) == .(sprintf("%1.2f", sum(bars))))),
bty = "n")
}
}
dev.copy(pdf,file.path(out_dir,sprintf("Models_vs_DN.pdf")),height=2.5, width=5)
dev.off()
par(mfrow=c(2,2))
mdlA <- c(1,1,2,3)
mdlB <- c(2,3,5,5)
for (i in 1:4)
{
bars <- fastbads$nll[fastbads$modeli == mdlB[i]] - fastbads$nll[fastbads$modeli == mdlA[i]]
plot(fastbads$nll[fastbads$modeli == mdlA[i]], fastbads$nll[fastbads$modeli == mdlB[i]], pch = 20, xlab = names[mdlA[i]], ylab = names[mdlB[i]])
abline(a = 0, b = 1, lty = 2)
legend("topleft",
legend = as.expression(bquote(italic(Delta~nLL) == .(sprintf("%1.2f", sum(bars))))),
bty = "n")
}
dev.copy(pdf,file.path(out_dir,sprintf("Models_vs_Models.pdf")),height=5, width=5)
dev.off()
# distribution of wp
par(mfrow=c(2,2))
for (mdli in 3:5)
{
bars <- fastbads$wp[fastbads$modeli == mdli]
hist(bars, 40, probability = TRUE, xlab = 'wp', main = names[mdli], bty = "n")
lines(density(bars))
legend('topleft',sprintf('mean wp = %.3f', mean(bars)), bty = 'n')
}
dev.copy(pdf,file.path(out_dir,sprintf("wp.pdf")),height=5, width=5)
dev.off()
par(mfrow=c(2,3))
for (mdli in 1:5)
{
bars <- fastbads$Mp[fastbads$modeli == mdli]
hist(bars, 40, probability = TRUE, xlab = 'Mp', main = names[mdli], bty = "n")
lines(density(bars))
legend('topleft',sprintf('mean Mp = %1.1f', mean(bars)), bty = 'n')
}
dev.copy(pdf,file.path(out_dir,sprintf("Mp.pdf")),height=5, width=7.5)
dev.off()
par(mfrow=c(2,3))
for (mdli in 1:5)
{
bars <- fastbads$delta[fastbads$modeli == mdli]
hist(bars, 40, probability = TRUE, xlab = expression(delta), main = names[mdli], bty = "n")
lines(density(bars))
test <- t.test(bars)
legend('topleft',as.expression(bquote(mean~delta == .(sprintf('%1.3f\np = %1.3f', mean(bars), test$p.value)))), bty = 'n')
}
dev.copy(pdf,file.path(out_dir,sprintf("delta.pdf")),height=5, width=7.5)
dev.off()
# Mp & wp colinearity
par(mfrow=c(2,2))
for (mdli in 3:5)
{
plot(Mp ~ wp, data = fastbads[fastbads$modeli == mdli,], log ='y', xlab = 'wp',ylab = 'Mp', main = names[mdli], pch = 20)
}
dev.copy(pdf,file.path(out_dir,sprintf("Mp~wp.pdf")),height=5, width=5)
dev.off()
par(mfrow=c(2,2))
for (mdli in c(2,4,5))
{
bars <- fastbads$scl[fastbads$modeli == mdli]
hist(bars, 40, probability = TRUE, xlab = "Scale", main = names[mdli], bty = "n")
lines(density(bars))
legend('topleft',as.expression(bquote(mean~scale == .(sprintf('%1.3f', mean(bars))))), bty = 'n')
}
dev.copy(pdf,file.path(out_dir,sprintf("scl.pdf")),height=5, width=5)
dev.off()
subID
grpdcsn$choice
N <- length(grpdcsn$subID == si & !is.na(grpdcsn$choice))
N <- sum(grpdcsn$subID == si & !is.na(grpdcsn$choice))
N
subOrder <- unique(fastbads$subID)
subOrder
si <- 1
N <- sum(grpdcsn$subID == subID[si] & !is.na(grpdcsn$choice))
N
nLL <- fastbads$nLL[fastbads$subID == si]
nLL
fastbads$nLL
fastbads$nll
fastbads$nll[fastbads$subID == si]
nLL <- fastbads$nll[fastbads$subID == si & fastbads$modeli == mdli]
nLL
AIC <- 2*k + 2*nLL
BIC <- k*log(N) + 2*nLL
mdli
if (mdli >= 4){k <- 4}
AIC <- 2*k + 2*nLL
BIC <- k*log(N) + 2*nLL
AIC
BIC
ICpool <- c()
for (si in 1:numel(subOrder))
{
N <- sum(grpdcsn$subID == subID[si] & !is.na(grpdcsn$choice)) # number of data points
for (mdli in 1:5) # number of parameters
{
if (mdli == 1){k <- 2}
if (mdli == 2 | mdli == 3){k <- 3}
if (mdli >= 4){k <- 4}
nLL <- fastbads$nll[fastbads$subID == si & fastbads$modeli == mdli]
AIC <- 2*k + 2*nLL
BIC <- k*log(N) + 2*nLL
ICpool <- rbind(AICpool, data.frame(subID = si, modeli = mdli, AIC = AIC, BIC = BIC))
}
}
ICpool <- c()
for (si in 1:length(subOrder))
{
N <- sum(grpdcsn$subID == subID[si] & !is.na(grpdcsn$choice)) # number of data points
for (mdli in 1:5) # number of parameters
{
if (mdli == 1){k <- 2}
if (mdli == 2 | mdli == 3){k <- 3}
if (mdli >= 4){k <- 4}
nLL <- fastbads$nll[fastbads$subID == si & fastbads$modeli == mdli]
AIC <- 2*k + 2*nLL
BIC <- k*log(N) + 2*nLL
ICpool <- rbind(AICpool, data.frame(subID = si, modeli = mdli, AIC = AIC, BIC = BIC))
}
}
ICpool <- c()
for (si in 1:length(subOrder))
{
N <- sum(grpdcsn$subID == subID[si] & !is.na(grpdcsn$choice)) # number of data points
for (mdli in 1:5) # number of parameters
{
if (mdli == 1){k <- 2}
if (mdli == 2 | mdli == 3){k <- 3}
if (mdli >= 4){k <- 4}
nLL <- fastbads$nll[fastbads$subID == si & fastbads$modeli == mdli]
AIC <- 2*k + 2*nLL
BIC <- k*log(N) + 2*nLL
ICpool <- rbind(ICpool, data.frame(subID = si, modeli = mdli, AIC = AIC, BIC = BIC))
}
}
ICpool
AIC
BIC
k
N
nLL
si
mdli
ICpool <- c()
for (si in 1:length(subOrder))
{
N <- sum(grpdcsn$subID == subID[si] & !is.na(grpdcsn$choice)) # number of data points
for (mdli in 1:5) # number of parameters
{
if (mdli == 1){k <- 2}
if (mdli == 2 | mdli == 3){k <- 3}
if (mdli >= 4){k <- 4}
nLL <- fastbads$nll[fastbads$subID == subOrder[si] & fastbads$modeli == mdli]
AIC <- 2*k + 2*nLL
BIC <- k*log(N) + 2*nLL
ICpool <- rbind(ICpool, data.frame(subID = subOrder[si], modeli = mdli, AIC = AIC, BIC = BIC))
}
}
ICpool
fastbads <- merge(fastbads, ICpool, by = c('subID','modeli'))
fastbads
par(mfrow=c(2,2))
for (mdli in 1)
{
for (mdlj in 2:5)
{
bars <- fastbads$AIC[fastbads$modeli == mdlj] - fastbads$AIC[fastbads$modeli == mdli]
hist(bars, xlab = 'AIC', main = sprintf('%s - %s', names[mdlj], names[mdli]), 40)
legend("topleft",
legend = as.expression(bquote(italic(Delta~AIC) == .(sprintf("%1.2f", sum(bars))))),
bty = "n")
}
}
dev.copy(pdf,file.path(out_dir,sprintf("Models_vs_McFadden.AIC.pdf")),height=5, width=5)
dev.off()
par(mfrow=c(2,2))
for (mdli in 1)
{
for (mdlj in 2:5)
{
bars <- fastbads$BIC[fastbads$modeli == mdlj] - fastbads$BIC[fastbads$modeli == mdli]
hist(bars, xlab = 'BIC', main = sprintf('%s - %s', names[mdlj], names[mdli]), 40)
legend("topleft",
legend = as.expression(bquote(italic(Delta~BIC) == .(sprintf("%1.2f", sum(bars))))),
bty = "n")
}
}
dev.copy(pdf,file.path(out_dir,sprintf("Models_vs_McFadden.BIC.pdf")),height=5, width=5)
dev.off()
par(mfrow=c(2,2))
for (mdli in 2)
{
for (mdlj in 3:5)
{
bars <- fastbads$AIC[fastbads$modeli == mdlj] - fastbads$AIC[fastbads$modeli == mdli]
hist(bars, xlab = 'AIC', main = sprintf('%s - %s', names[mdlj], names[mdli]), 40)
legend("topleft",
legend = as.expression(bquote(italic(Delta~AIC) == .(sprintf("%1.2f", sum(bars))))),
bty = "n")
}
}
dev.copy(pdf,file.path(out_dir,sprintf("Models_vs_Mdl2.AIC.pdf")),height=5, width=5)
dev.off()
par(mfrow=c(2,2))
for (mdli in 2)
{
for (mdlj in 3:5)
{
bars <- fastbads$BIC[fastbads$modeli == mdlj] - fastbads$BIC[fastbads$modeli == mdli]
hist(bars, xlab = 'BIC', main = sprintf('%s - %s', names[mdlj], names[mdli]), 40)
legend("topleft",
legend = as.expression(bquote(italic(Delta~BIC) == .(sprintf("%1.2f", sum(bars))))),
bty = "n")
}
}
dev.copy(pdf,file.path(out_dir,sprintf("Models_vs_Mdl2.BIC.pdf")),height=5, width=5)
dev.off()
par(mfrow=c(1,2))
for (mdli in 3)
{
for (mdlj in 4:5)
{
bars <- fastbads$AIC[fastbads$modeli == mdlj] - fastbads$AIC[fastbads$modeli == mdli]
hist(bars, xlab = 'nLL', main = sprintf('%s - %s', names[mdlj], names[mdli]), 40)
legend("topleft",
legend = as.expression(bquote(italic(Delta~AIC) == .(sprintf("%1.2f", sum(bars))))),
bty = "n")
}
}
dev.copy(pdf,file.path(out_dir,sprintf("Models_vs_DN.AIC.pdf")),height=2.5, width=5)
dev.off()
par(mfrow=c(1,2))
for (mdli in 3)
{
for (mdlj in 4:5)
{
bars <- fastbads$BIC[fastbads$modeli == mdlj] - fastbads$BIC[fastbads$modeli == mdli]
hist(bars, xlab = 'BIC', main = sprintf('%s - %s', names[mdlj], names[mdli]), 40)
legend("topleft",
legend = as.expression(bquote(italic(Delta~BIC) == .(sprintf("%1.2f", sum(bars))))),
bty = "n")
}
}
dev.copy(pdf,file.path(out_dir,sprintf("Models_vs_DN.BIC.pdf")),height=2.5, width=5)
dev.off()
dBIC <- fastbads$BIC[fastbads$modeli == 4] - fastbads$BIC[fastbads$modeli == 3]
scale <- fastbads$scl[fastbads$modeli == 4]
plot(scale, dBIC, pch = 20)
log(dBIC)
plot(scale, dBIC, pch = 20, xlab = "Scale in dDNb", ylab = expression(Delta~BIC dDNb - DN))
plot(scale, dBIC, pch = 20, xlab = "Scale in dDNb", ylab = expression(DeltaBIC dDNb - DN))
plot(scale, dBIC, pch = 20, xlab = "Scale in dDNb", ylab = expression(Delta "BIC dDNb - DN"))
plot(scale, dBIC, pch = 20, xlab = "Scale in dDNb", ylab = as.expression(bquote(Delta~"BIC dDNb - DN")))
plot(scale, dBIC, pch = 20, xlab = "Scale in dDNb", ylab = as.expression(bquote(Delta~"BIC(dDNb - DN)")))
plot(scale, dBIC, pch = 20, xlab = "Scale in dDNb", ylab = as.expression(bquote(Delta~"BIC (dDNb - DN)")))
plot(scale, dBIC, pch = 20, xlab = "Scale in dDNb", ylab = as.expression(bquote(Delta~"BIC (dDNb - DN)")))
dev.copy(pdf,file.path(out_dir,sprintf("scl~dBIC.pdf")),height=2.5, width=2.5)
dev.off()
dBIC <- fastbads$BIC[fastbads$modeli == 4] - fastbads$BIC[fastbads$modeli == 3]
scale <- fastbads$scl[fastbads$modeli == 4]
plot(scale, dBIC, pch = 20, cex = .5, xlab = "Scale in dDNb", ylab = as.expression(bquote(Delta~"BIC (dDNb - DN)")))
dev.copy(pdf,file.path(out_dir,sprintf("scl~dBIC.pdf")),height=2.5, width=2.5)
dev.off()
dBIC <- fastbads$BIC[fastbads$modeli == 4] - fastbads$BIC[fastbads$modeli == 3]
scale <- fastbads$scl[fastbads$modeli == 4]
plot(scale, dBIC, pch = 20, cex = .5, xlab = "Scale in dDNb", ylab = as.expression(bquote(Delta~"BIC (dDNb - DN)")))
dev.copy(pdf,file.path(out_dir,sprintf("scl~dBIC.pdf")),height=4, width=4)
dev.off()
str(mrgdat)
55*36
# test on the mean bidding values between precise and vague items
test <- aov(bidmean ~ touched + Error(subID), data = mrgdat)
# test on the mean bidding values between precise and vague items
summary(test <- aov(bidmean ~ touched + Error(subID), data = mrgdat))
test
# test only on V3
# raw values, all super significant!
V3vars <- aggregate(varbid3 ~ V3 + ID3 + subID + Vagueness, data = grpdcsn, FUN = mean)
View(V3vars)
V3vars
str(V3vars)
test <- aov(V3 ~ Vagueness + Error(subID), data = V3vars)
summary(test <- aov(V3 ~ Vagueness + Error(subID), data = V3vars))
grpdcsn$chosenItem
tmpdat <- grpdcsn
tmpdat$choice == 3
tmpdat <- grpdcsn
tmpdat$chosenV3 <- tmpdat$choice == 3
tmpdat$chosenV3
as.numeric(tmpdat$choice == 3)
tmpdat <- grpdcsn
as.numeric(tmpdat$choice == 3)
tmpdat <- grpdcsn
tmpdat$choice
as.numeric(tmpdat$chosenItem == 3)
tmpdat$chosenV3 <- as.numeric(tmpdat$chosenItem == 3)
tmpdat$chosenV3
ChrV3 <- aggregate(chosen ~ Vagueness + subID, data = tmpdat, FUN = mean)
ChrV3 <- aggregate(chosenV3 ~ Vagueness + subID, data = tmpdat, FUN = mean)
ChrV3
summary(test <- aov(chosenV3 ~ Vagueness + Error(subID), data = ChrV3))
summary(test <- lmer(varbid3 ~ V3*Vagueness + (1|subID), data = V3vars))
